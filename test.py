import numpy as np

bitsW = 2
bitsA = 8

def write_matrix_weight(input_matrix, length, filename):
    """
    row, column, inchannel, outchannel

    W0,0,0,0    W0,0,0,1    W0,0,0,2
    W0,0,1,0    W0,0,1,1    W0,0,1,2
    W0,0,2,0    W0,0,2,1    W0,0,2,2
    W0,1,0,0    W0,1,0,1    W0,1,0,2
    W0,1,1,0    W0,1,1,1    W0,1,1,2
    W0,1,2,0    W0,1,2,1    W0,1,2,2
    W0,2,0,0    W0,2,0,1    W0,2,0,2
    ...
    W2,2,2,0    W2,2,2,1    W2,2,2,2

    inchannel -> column -> row
    """
    cout = input_matrix.shape[-1]
    weight_matrix = input_matrix.reshape(-1, cout)
    filled_matrix_b = np.zeros([weight_matrix.shape[0], weight_matrix.shape[1] * length], dtype=np.str)
    filled_matrix_bin, scale = dec2bin(weight_matrix[:], length)
    for i, b in enumerate(filled_matrix_bin):
        filled_matrix_b[:, i::length] = b
    np.savetxt(filename, filled_matrix_b, delimiter=",", fmt='%s')

def stretch_input_nfp(input_matrix, window_size, stride=1):
    """
    original_input_matrix:
        batch 0:
            0  1  2  3  4        25 26 27 28 29       50 51 52 53 54
            5  6  7  8  9        30 31 32 33 34       55 56 57 58 59
            10 11 12 13 14       35 36 37 38 39       60 61 62 63 64
            15 16 17 18 19       40 41 42 43 44       65 66 67 68 69
            20 21 22 23 24       45 46 47 48 49       70 71 72 73 74
        batch 1:
            ...
        batch 2:
            ...

    input_matrix:
        batch 0:
             0 25 50  1 26 51  2 27 52  5 30 55  6 31 56  7 32 57 10 35 60 11 36 61 12 37 62
             1 26 51  2 27 52  3 28 53  6 31 56  7 32 57  8 33 58 11 36 61 12 37 62 13 38 63
             2 27 52  ...
             5 30 55  ...
             6 31  ...
             7 32  ...
            10 35 ...
            11 36 ...
            12 37 ...
        batch 1:
            ...
        batch 2:
            ...

    filled_matrix_bin:
        batch 0:
            scale 2^7 of
                0 25 50  1 26 51  2 27 52  5 30 55  6 31 56  7 32 57 10 35 60 11 36 61 12 37 62
                1 26 51  2 27 52  3 28 53  6 31 56  7 32 57  8 33 58 11 36 61 12 37 62 13 38 63
                2 27 52  ...
                5 30 55  ...
                6 31  ...
                7 32  ...
                10 35 ...
                11 36 ...
                12 37 ...

            scale 2^6 of
                ...

            scale 2^5 of
                ...

            ...

            scale 2^0 of
                ...
        batch 1:
            ...
        batch 2:
            ...

    filled_matrix_b:
        from
    
        filled_matrix_bin ^ T

        to

        batch 0:
            (scale 2^7 of 0)  (scale 2^6 of 0)  ...  (scale 2^0 of 0)  (scale 2^7 of 1)  ...  (scale 2^0 of 2)  (scale 2^7 of 5)  ...  (scale 2^0 of 12)
            ...
            (scale 2^7 of 62) ...  (scale 2^0 of 74)
            ...
        batch 1:
            ...
        batch 2:
            ...
    """
    input_shape = input_matrix.shape
    row_num = (input_shape[2] - window_size) // stride + 1
    col_num = (input_shape[3] - window_size) // stride + 1
    assert((row_num - 1) * stride + window_size == input_shape[2])
    assert((col_num - 1) * stride + window_size == input_shape[3])
    item_num = row_num * col_num
    output_matrix = np.zeros((input_shape[0], item_num, input_shape[1]*window_size*window_size))
    iter = 0
    for i in range(row_num):
        for j in range(col_num):
            for b in range(input_shape[0]):
                output_matrix[b, iter, :] = input_matrix[b, :, i:i+window_size,j: j+window_size].transpose(1,2,0).reshape(input_shape[1]*window_size*window_size)
            iter += 1
    return output_matrix

def write_matrix_activation_conv(input_matrix, fill_dimension, length, filename):
    input_shape = input_matrix.shape
    filled_matrix_b = np.zeros([input_shape[0], input_shape[2], input_shape[1] * length], dtype=np.str)
    for batch in range(input_shape[0]):
        filled_matrix_bin, scale = dec2bin(input_matrix[batch, :], length)
        for i, b in enumerate(filled_matrix_bin):
            filled_matrix_b[batch, :, i::length] = b.transpose()
    np.savetxt(filename, filled_matrix_b, delimiter=",", fmt='%s')

def write_matrix_activation_fc(input_matrix, fill_dimension, length, filename):
    input_shape = input_matrix.shape
    filled_matrix_b = np.zeros([input_shape[0], input_shape[1], length], dtype=np.str)
    for batch in range(input_shape[0]):
        filled_matrix_bin, scale = dec2bin(input_matrix[batch, :], length)
        for i, b in enumerate(filled_matrix_bin):
            filled_matrix_b[batch, :, i] = b
    np.savetxt(filename, filled_matrix_b, delimiter=",", fmt='%s')
    
def stretch_input(input_matrix,window_size = 5):
    """
    original_input_matrix:
        batch 0:
            0  1  2  3  4        25 26 27 28 29       50 51 52 53 54
            5  6  7  8  9        30 31 32 33 34       55 56 57 58 59
            10 11 12 13 14       35 36 37 38 39       60 61 62 63 64
            15 16 17 18 19       40 41 42 43 44       65 66 67 68 69
            20 21 22 23 24       45 46 47 48 49       70 71 72 73 74
        batch 1:
            ...
        batch 2:
            ...

    input_matrix:
        batch 0:
            0  1  2  5  6  7  10 11 12 25 26 27 30 31 32 35 36 37 50 51 52 55 56 57 60 61 62
            1  2  3  6  7  8  11 12 13 26 27 28 31 32 33 36 37 38 51 52 53 56 57 58 61 62 63
            2  3  4  ...
            5  6  7  ...
            6  7  ...
            7  8  ...
            10 11 ...
            11 12 ...
            12 13 ...
        batch 1:
            ...
        batch 2:
            ...

    filled_matrix_bin:
        scale 2^7 of
            0  1  2  5  6  7  10 11 12 25 26 27 30 31 32 35 36 37 50 51 52 55 56 57 60 61 62
            1  2  3  6  7  8  11 12 13 26 27 28 31 32 33 36 37 38 51 52 53 56 57 58 61 62 63
            2  3  4  ...
            5  6  7  ...
            6  7  ...
            7  8  ...
            10 11 ...
            11 12 ...
            12 13 ...

        scale 2^6 of
            ...

        scale 2^5 of
            ...

        ...

        scale 2^0 of
            ...

    filled_matrix_b:
        from

        0  1  2  5  6  7  10 11 12
        1  2  3  6  7  8  11 12 13
        ...
        12 13 14 17 18 19 22 23 24
        25 26 27 30 31 32 35 36 37
        ...
        61 62 63 66 67 68 71 72 73
        62 63 64 67 68 69 72 73 74

        to

        (scale 2^7 of 0)  (scale 2^6 of 0)  ...  (scale 2^0 of 0)  (scale 2^7 of 1)  ...  (scale 2^0 of 2)  (scale 2^7 of 5)  ...  (scale 2^0 of 12)
        ...
        (scale 2^7 of 62) ...  (scale 2^0 of 74)
    """
    input_shape = input_matrix.shape
    item_num = (input_shape[2] - window_size + 1) * (input_shape[3]-window_size + 1)
    output_matrix = np.zeros((input_shape[0],item_num,input_shape[1]*window_size*window_size))
    iter = 0
    for i in range( input_shape[2]-window_size + 1 ):
        for j in range( input_shape[3]-window_size + 1 ):
            for b in range(input_shape[0]):
                output_matrix[b,iter,:] = input_matrix[b, :, i:i+window_size,j: j+window_size].reshape(input_shape[1]*window_size*window_size)
            iter += 1
    return output_matrix
    
def dec2bin(x,n):
    y = x.copy()
    out = []
    scale_list = []
    delta = 1.0/(2**(n-1))
    x_int = x/delta

    base = 2**(n-1)

    y[x_int>=0] = 0
    y[x_int< 0] = 1
    rest = x_int + base*y
    out.append(y.copy())
    scale_list.append(-base*delta)
    for i in range(n-1):
        base = base/2
        y[rest>=base] = 1
        y[rest<base]  = 0
        rest = rest - base * y
        out.append(y.copy())
        scale_list.append(base * delta)

    return out,scale_list
    
def main():
    a = np.arange(0, 0.002 * 3*3*5*5 - 0.002, 0.002)
    #a = np.arange(3*3*5*5)
    a = a.reshape((3,3,5,5))
    aa = stretch_input_nfp(a, 3)
    write_matrix_activation_conv(aa, None, bitsA, 'input')

    w = np.zeros(3*3*3*3)
    w[np.random.random(3*3*3*3) > 0.33] = 0.5
    w[np.random.random(3*3*3*3) > 0.66] = -0.5
    w = w.reshape((3,3,3,3))
    write_matrix_weight(w, bitsW, 'weight')
    
if __name__ == '__main__':
    main()
    
